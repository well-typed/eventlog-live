name: CI

on:
  push:
    branches:
      - "master"
  pull_request:

# Set the default shell on all platforms.
defaults:
  run:
    shell: sh

jobs:
  #############################################################################
  # Build
  #############################################################################
  build:
    name: |
      ${{ matrix.name
       || format(
            'Build on {0}{1}',
            startsWith(matrix.os, 'ubuntu-') && 'Linux' || startsWith(matrix.os, 'macOS-') && 'macOS',
            matrix.ghc-version && format(' with GHC {0}', matrix.ghc-version)
          )
       }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🛠️ Setup Haskell
        id: setup-haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc-version }}

      - name: 🛠️ Setup Protobuf Compiler
        id: setup-protoc
        uses: ./../.github/actions/setup-protoc
        with:
          protobuf-version: ${{ steps.dev-dependencies.outputs.protoc }}

      - name: 🗄️ Generate Cabal plan
        run: cabal build all --dry-run

      - name: 💾 Restore Cabal dependencies
        uses: actions/cache/restore@v4
        id: cache-cabal
        env:
          key: build-${{ runner.os }}-ghc-${{ steps.setup-haskell.outputs.ghc-version }}-cabal-${{ steps.setup-haskell.outputs.cabal-version }}
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('dist-newstyle/cache/plan.json') }}
          restore-keys: ${{ env.key }}-

      - name: 🛠️ Build Cabal dependencies
        run: cabal build all --only-dependencies

      - name: 💾 Save Cabal dependencies
        uses: actions/cache/save@v4
        if: ${{ steps.cache-cabal.outputs.cache-hit != 'true' }}
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ steps.cache-cabal.outputs.cache-primary-key }}

      - name: 🏗️ Build
        run: cabal build all

      - name: 🧪 Test fibber-collatzer
        run: ./examples/fibber/fibber-collatzer.sh

    strategy:
      fail-fast: false
      matrix:
        os:
          - "ubuntu-latest"
          - "macOS-latest"
        ghc-version:
          - "9.2.8"
          - "9.4.8"
          - "9.6.7"
          - "9.8.4"
          - "9.10.2"
        include:
          - name: false

  #############################################################################
  # Build dockerfiles
  #############################################################################

  build-dockerfiles:
    name: "Build dockerfiles"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🏗️ dockerfiles/Dockerfile.${{ matrix.dockerfile }}
        run: |
          docker build \
            --tag well-typed/${{ matrix.dockerfile }} \
            --file dockerfiles/Dockerfile.${{ matrix.dockerfile }} \
            .

    strategy:
      fail-fast: false
      matrix:
        dockerfile:
          - "collatzer"
          - "dumper"
          - "eventlog-live-influxdb"
          - "eventlog-live-otelcol"
          - "fibber"
          - "ghc-events-show"
          - "oddball"

  #############################################################################
  # Lint with actionlint
  #############################################################################

  lint-actionlint:
    name: "Lint with actionlint"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: "Setup actionlint"
        uses: ./.github/actions/setup-actionlint
        with:
          actionlint-version: ${{ steps.dev-dependencies.outputs.actionlint }}

      - name: 🎗️ Lint with actionlint
        run: ./scripts/lint-actionlint.sh

  #############################################################################
  # Lint with cabal
  #############################################################################

  lint-cabal:
    name: "Lint with Cabal"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: 🛠️ Install Haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ steps.dev-dependencies.outputs.ghc }}
          cabal-version: ${{ steps.dev-dependencies.outputs.cabal }}
        id: setup-haskell

      - name: 🎗️ Lint with Cabal
        run: ./scripts/lint-cabal.sh

  #############################################################################
  # Lint with cabal-fmt
  #############################################################################

  lint-cabal-fmt:
    name: "Lint with cabal-fmt"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: 🛠️ Install cabal-fmt
        uses: ./.github/actions/setup-cabal-fmt
        with:
          cabal-fmt-version: ${{ steps.dev-dependencies.outputs.cabal-fmt }}
          ghc-version: ${{ steps.dev-dependencies.outputs.ghc }}
          cabal-version: ${{ steps.dev-dependencies.outputs.cabal }}

      - name: 🎗️ Lint with cabal-fmt
        run: ./scripts/lint-cabal-fmt.sh

  #############################################################################
  # Lint with HLint
  #############################################################################

  lint-hlint:
    name: "Lint with HLint"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: 🛠️ Install HLint
        uses: haskell-actions/hlint-setup@v2
        with:
          version: ${{ steps.dev-dependencies.outputs.hlint }}
        id: setup-hlint

      - name: 🎗️ Lint with HLint
        run: ./scripts/lint-hlint.sh
        env:
          HLINT: ${{ steps.setup-hlint.outputs.hlint-bin }}

  #############################################################################
  # Lint with Fourmolu
  #############################################################################

  lint-fourmolu:
    name: "Lint with Fourmolu"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: 🛠️ Install Fourmolu
        uses: ./.github/actions/setup-fourmolu
        with:
          fourmolu-version: ${{ steps.dev-dependencies.outputs.fourmolu }}
          ghc-version: ${{ steps.dev-dependencies.outputs.ghc }}
          cabal-version: ${{ steps.dev-dependencies.outputs.cabal }}

      - name: 🎗️ Lint with Fourmolu
        run: ./scripts/lint-fourmolu.sh

  #############################################################################
  # Lint with Prettier
  #############################################################################

  lint-prettier:
    name: "Lint with Prettier"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: 🎗️ Lint with Prettier
        run: ./scripts/lint-prettier.sh
        env:
          PRETTIER: "npm exec --yes --package=prettier@${{ steps.dev-dependencies.outputs.prettier }} prettier --"

  #############################################################################
  # Lint with ShellCheck
  #############################################################################

  lint-shellcheck:
    name: "Lint with ShellCheck"
    runs-on: "ubuntu-latest"
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: 🗄️ Read dev-dependencies
        run: cat "./scripts/dev-dependencies.txt" >> "$GITHUB_OUTPUT"
        id: dev-dependencies

      - name: 🛠️ Install ShellCheck
        uses: ./.github/actions/setup-shellcheck
        with:
          shellcheck-version: ${{ steps.dev-dependencies.outputs.shellcheck }}

      - name: 🎗️ Lint with ShellCheck
        run: ./scripts/lint-shellcheck.sh
